$fh-scale-factor: 0.05 !default;
$fh-scale-levels: 64 !default;
$fh-scale-steps: (
  xxs: 0.67,
  xs: 0.83,
  sm: 1.0,
  md: 1.17,
  lg: 1.5,
  xl: 2.0,
  xxl: 2.67
) !default;

@mixin scale-handler($params) {

  $options: map-merge((
    ctx: '',
    size: 1,
    unit: rem,
    step: 'md'
  ), $params);

  $ctx:  map-get($options, ctx);
  $step: map-get($options, step);
  $size: map-get($options, size);

  #{$ctx}[scale='#{$step}'],
  #{$ctx}.scale--#{$step} {
    font-size: $size + map-get($options, unit);
  }

  #{$ctx}[scale-root='#{$step}'],
  #{$ctx}.scale-root--#{$step} {
    font-size: $size + rem;
  }

  #{$ctx}[scale-inherit='#{$step}'],
  #{$ctx}.scale-inherit--#{$step} {
    font-size: $size + em;
  }
}

@mixin fh-scale-steps($ctx, $unit) {
  @each $step in $fh-scale-steps {
    $idx: index($fh-scale-steps, $step);
    $key: nth(map-keys($fh-scale-steps), $idx);
    $options: (
      ctx: $ctx,
      unit: $unit,
      size: map-get($fh-scale-steps, $key),
      step: $key
    );

    @include scale-handler($options);
  }
}

@mixin fh-scale-levels($ctx, $unit) {
  @for $idx from 1 through $fh-scale-levels {
    $options: (
      ctx: $ctx,
      unit: $unit,
      size: $fh-scale-factor * $idx,
      step: $idx
    );
    @include scale-handler($options);
  }
}

@mixin fh-scale($target: self, $unit: em) {
  $ctx: if($target == self, '&', '');
  @include fh-scale-levels($ctx, $unit);
  @include fh-scale-steps($ctx, $unit);
}

@mixin fh-scale-generator() {
  @include fh-scale(child, rem);

  .is-scalable {
    font-size: 1em;
    @include fh-scale(self, em);
  }
}
