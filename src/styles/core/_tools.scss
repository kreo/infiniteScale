/// Deep get function to get a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-get-deep($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-set-deep($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

@function extend($obj, $ext-obj) {
  @return map-merge($obj, $ext-obj);
}

@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

@function convert-px-to-percent($target, $parent: 16) {
  @return percentage($target / $parent);
}

@function convert-px-to-em($target, $context: 16) {
  @return ($target / $context) + 0em;
}

@mixin force-self-tag-context($tag, $prop, $val: inherit) {
  @at-root {
    #{$tag}#{&} {
      #{$prop}: $val;
    }
  }
}

@mixin component($name, $options: ()) {
  $options: extend(
    (
      name: $name,
      width: 100%,
      width-max: 100%,
      width-min: null,
      theme: light,
      border: true,
      shadows: true,
      deep: 2,
      z: 1,
      fx-props: all,
      fx-type: fade,
      fx-duration: 0.25s,
      fx-delay: 0
    ),
    $options
  );

  @warn "Created Dynamic Sass Component: #{map-get($options, name)}";

  .#{map-get($options, name)} {
    @extend %o-#{$name};
    @content;
  }
}
