// ---------------------------------------------------------
// strip-unit
// Make a number unitless
//
// Required arguments:
// `$number` String
//
// Example of use:
// strip-unit(15px)
//
// @return Number
// ---------------------------------------------------------
@function fh-strip-unit ($number) {
  @if type-of($number) != 'number' {
    @error 'The argument $number: `#{$number}` is of incorrect type: `#{type-of($number)}`. Type of `Number` is required!';
  }
  @else if unitless($number) {
    @warn 'The argument $number: `#{$number}` has no unit. Unit is required!';
  }

  @return $number / ($number * 0 + 1);
}

// ---------------------------------------------------------
// convert-unit
// Convert number's pixel unit to em/rem
//
// Required arguments:
// `$number` Number
// `$unit` String
// `$base` Number *predefined*
//
// Example of use:
// convert-unit(15px, 'rem')
// convert-unit(15px, 'em')
//
// @return List
// ---------------------------------------------------------
@function fh-convert-unit ($number, $unit, $base: $dfr--base-fontSize) {
  @if type-of($number) != 'number' {
    @error 'The argument $number: `#{$number}` is of incorrect type: `#{type-of($number)}`. Type of `Number` is required!';
  }
  @else if unit($number) != 'px' {
    @error 'The argument $number: `#{$number}` has incorrect unit: `#{unit($number)}`. Unit of `px` is required!';
  }
  @else if $unit != 'em' and $unit != 'rem' {
    @error 'The argument $unit: `#{$unit}` has incorrect value: `#{$unit}`. Value of `em` or `rem` is required!';
  }

  @return fh-strip-unit($number) / fh-strip-unit($base) + unquote($unit);
}
